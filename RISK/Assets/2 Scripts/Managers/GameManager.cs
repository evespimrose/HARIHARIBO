using Photon.Pun;
using Photon.Pun.UtilityScripts;
using Photon.Realtime;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

public class GameManager : SingletonManager<GameManager>
{
    public Transform playerPosition;
    public static bool isGameReady;

    protected override void Awake()
    {
        base.Awake();
    }

    //Photonï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½Æ®ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½È­ ï¿½Ï´ï¿½ ï¿½ï¿½ï¿?
    //1. ï¿½ï¿½ï¿½ï¿½ï¿½Õ¿ï¿½ PhotonView ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ®ï¿½ï¿½ ï¿½ï¿½ï¿½Ì°ï¿½, PhotonNetwork.Instantiateï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ Å¬ï¿½ï¿½ï¿½Ì¾ï¿½Æ®ï¿½é¿¡ï¿½Ôµï¿½
    //ï¿½ï¿½ï¿½ï¿½È­ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ®ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ïµï¿½ï¿½ï¿½ ï¿½ï¿½.
    //2. PhotonViewï¿½ï¿½ Observing ï¿½ï¿½ ï¿½ï¿½ ï¿½Öµï¿½ï¿½ï¿½ View ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ®ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½.
    //3. ï¿½ï¿½ Viewï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ®ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½Êµï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½Ã³ï¿½ï¿½ï¿½ï¿½ ï¿½Ýµï¿½ï¿?ï¿½Ò°ï¿½.

    private IEnumerator Start()
    {
        yield return new WaitUntil(() => isGameReady);
        yield return new WaitForSeconds(1f);

        //GetPlayerNumber È®ï¿½ï¿½ï¿½Ô¼ï¿½ : ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½Æ®ï¿½ï¿½Å©ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿?ï¿½Ù¸ï¿½ ï¿½Ã·ï¿½ï¿½Ì¾ï¿½ï¿?ï¿½ï¿½ï¿½Ì¿ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½È­ ï¿½ï¿½ ï¿½Ã·ï¿½ï¿½Ì¾ï¿½ ï¿½ï¿½È£.
        //Actor Numberï¿½ï¿½ ï¿½Ù¸ï¿½. (Sceneï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ 0~ï¿½Ã·ï¿½ï¿½Ì¾ï¿½ ï¿½ï¿½ ï¿½ï¿½Å­ ï¿½Î¿ï¿½ï¿½ï¿½)
        //GetPlayerNumber È®ï¿½ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ï±ï¿½ ï¿½ï¿½ï¿½Ø¼ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ PlayerNumbering ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Æ®ï¿½ï¿½ ï¿½Ê¿ï¿½ï¿½Ï´ï¿½.
        int playerNumber = PhotonNetwork.LocalPlayer.GetPlayerNumber();
        Vector3 playerPos = playerPosition.GetChild(playerNumber).position;
        GameObject playerObj = PhotonNetwork.Instantiate("Player", playerPos, Quaternion.identity);
        playerObj.name = $"Player {playerNumber}";

        //Vector3 spawnPos = playerPosition.GetChild(Random.Range(0, playerPosition.childCount)).position;

        //PhotonNetwork.Instantiate("Player", spawnPos, Quaternion.identity).name
        //    = PhotonNetwork.NickName;

        // ï¿½ï¿½ ï¿½Ø¿ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ MasterClientï¿½ï¿½ ï¿½Æ´Ï¸ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½
        if (false == PhotonNetwork.IsMasterClient)
        {
            yield break;
        }

        // MasterClientï¿½ï¿½ 5ï¿½Ê¸ï¿½ï¿½ï¿½ Pillï¿½ï¿½ PhotonNetworkï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ Instantiate.
        while (true)
        {
            Vector3 spawnPos = Random.insideUnitSphere * 15f;
            spawnPos.y = 0;
            Quaternion spawnRot = Quaternion.Euler(0, Random.Range(0, 180f), 0);

            // ï¿½ï¿½ Pillï¿½ï¿½ï¿½ï¿½ random colorï¿½ï¿½ random healAmountï¿½ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½Ï°ï¿½ ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?

            Vector3 color = new Vector3(Random.value, Random.value, Random.value);
            float healAmount = Random.Range(10f, 30f);

            PhotonNetwork.Instantiate("Pill", spawnPos, spawnRot, data: new object[] { color, healAmount });

            yield return new WaitForSeconds(5f);
        }
    }
    public IEnumerator InstantiatePlayer(Playerstats playerStats)
    {
        //PhotonNetwork.ConnectUsingSettings();
        //if (!PhotonNetwork.IsConnected)
        //{
        //    Debug.LogError("Not connected to Photon. Attempting to connect...");
        //    yield break;
        //}

        //if (!PhotonNetwork.InRoom)
        //{
        //    RoomOptions roomOptions = new RoomOptions { MaxPlayers = 4 };
        //    PhotonNetwork.CreateRoom(null, roomOptions);
        //}

        //if (PhotonNetwork.InRoom)
        //{
        AsyncOperation asyncLoad = SceneManager.LoadSceneAsync("LobbyScene", LoadSceneMode.Single);

        yield return new WaitUntil(() => asyncLoad.isDone);

        print("InstantiatePlayer");

        Vector3 spawnPosition = Vector3.zero;
        //GameObject playerObj = PhotonNetwork.Instantiate("Player", spawnPosition, Quaternion.identity);

        GameObject playerObj = Instantiate(Resources.Load<GameObject>("Player"), spawnPosition, Quaternion.identity);
        Player player = playerObj.GetComponent<Player>();
        //player.InitializeStats(playerStats);
        UnitManager.Instance?.RegisterPlayer(playerObj);
    }
    //    else
    //    {
    //        Debug.LogError("Failed to join or create a room.");
    //    }
    //}
}
